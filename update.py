# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'update.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QLabel
from PyQt5.QtGui import QMovie
import mysql.connector
from mysql.connector import Error
from PyQt5.QtCore import QTimer, QCoreApplication
from PyQt5.QtWidgets import QMessageBox
import os
import sys
import requests
import shutil
import subprocess


# Database configuration
host = "sbsmanagerdb.c1gcwi06wgyq.ap-southeast-5.rds.amazonaws.com"
user = "admin"
password = "sbstraderhq123"
database = "sbsdb"


class Ui_update(object):

    def __init__(self, main_app):
        self.main_app = main_app

    def setupUi(self, Form):
        print("setup")

        # Determine the base path for accessing resources
        if getattr(sys, 'frozen', False):
            base_path = sys._MEIPASS  # Use this path when running as a compiled executable
        else:
            base_path = os.path.dirname(os.path.abspath(__file__))

        # Set paths for loading resources
        self.loading_path = os.path.join(base_path, 'image', 'loading.gif')
        self.checked_path = os.path.join(base_path, 'image', 'checked.gif')
        self.version_file_path = os.path.join(base_path, 'version.txt')  # Path for version.txt
        print(self.loading_path)

        # Setup UI components
        Form.setObjectName("Form")
        Form.resize(640, 480)
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(Form)
        self.verticalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.widget = QtWidgets.QWidget(Form)
        self.widget.setStyleSheet("background-color: rgb(255, 255, 255); ")
        self.widget.setObjectName("widget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.widget)
        self.verticalLayout.setObjectName("verticalLayout")
        spacerItem = QtWidgets.QSpacerItem(20, 188, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout.addItem(spacerItem)
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        spacerItem1 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.horizontalLayout_2.addItem(spacerItem1)
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setSpacing(30)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.loading = QtWidgets.QLabel(self.widget)
        
        self.loading.setMinimumSize(QtCore.QSize(50, 50))
        self.loading.setMaximumSize(QtCore.QSize(50, 50))
        font = QtGui.QFont()
        font.setPointSize(15)
        self.loading.setFont(font)
        self.loading.setScaledContents(True)
        self.loading.setObjectName("loading")

        self.movie = QMovie(self.loading_path)
        self.loading.setMovie(self.movie)
        self.movie.start()
        
        self.horizontalLayout.addWidget(self.loading)
        self.checking = QtWidgets.QLabel(self.widget)
        self.checking.setAlignment(QtCore.Qt.AlignCenter)
        font = QtGui.QFont()
        font.setPointSize(21)
        self.checking.setFont(font)
        self.checking.setStyleSheet("color: rgb(0, 0, 0);")
        self.checking.setObjectName("checking")
        self.checking.setMinimumSize(QtCore.QSize(50, 50))
        self.checking.setMaximumSize(QtCore.QSize(400, 50))
        self.horizontalLayout.addWidget(self.checking)
        self.horizontalLayout_2.addLayout(self.horizontalLayout)
        spacerItem2 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.horizontalLayout_2.addItem(spacerItem2)
        self.verticalLayout.addLayout(self.horizontalLayout_2)
        spacerItem3 = QtWidgets.QSpacerItem(20, 188, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout.addItem(spacerItem3)
        self.verticalLayout_2.addWidget(self.widget)

        self.retranslateUi(Form)
        QtCore.QMetaObject.connectSlotsByName(Form)

        self.checking_updates()

    def checking_updates(self):
        conn = check_connection()
        time = QTimer()

        if conn:
            try:
                cursor = conn.cursor()
                query = "SELECT * FROM versions"
                cursor.execute(query)
                version = cursor.fetchall()
                print("sucessful depo")
                
            except Error as e:
                print(f"Error: {e}")
            finally:
                conn.close()

            version_current = None

            # Read the version from the version.txt file
            try:
                with open(self.version_file_path, 'r') as file:
                    version_current = file.read().strip() 
            except FileNotFoundError:
                print("version.txt not found!")
                return  # Stop execution if the file is not found

            if version_current == version[0][0]:
                print("same")
                QTimer.singleShot(2000, self.change_page)
            else:
                print("update")
                QTimer.singleShot(1000, self.updates)

    def updates(self):
        msg_box = QMessageBox()
        msg_box.setIcon(QMessageBox.Information)
        msg_box.setText("Updates are available")
        msg_box.setWindowTitle("Update Available")
        update_button = msg_box.addButton("Update Now", QMessageBox.AcceptRole)
        later_button = msg_box.addButton("Later", QMessageBox.RejectRole)

        # Show the message box and get the result
        msg_box.exec()

        if msg_box.clickedButton() == update_button:
            self.perform_update()
        elif msg_box.clickedButton() == later_button:
            self.schedule_later()
    
    def change_page(self):
        print("change page")
        self.loading.setMovie(None)
        self.movie = QMovie(self.checked_path)
        if not self.movie.isValid():
            print("Movie is not valid after loading.")
        else:
            print("movie is valid")
        self.loading.setMovie(self.movie)
        self.movie.start()
        
        QTimer.singleShot(2000, self.main_app.activity_page)

    def retranslateUi(self, Form):
        _translate = QtCore.QCoreApplication.translate
        Form.setWindowTitle(_translate("Form", "Form"))
        self.checking.setText(_translate("Form", "Checking Updates..."))

    def perform_update(self):
        download_url = "https://aws-update.s3.ap-southeast-5.amazonaws.com/new_version.zip"

        # Step 1: Download the zip file
        try:
            response = requests.get(download_url, stream=True)
            response.raise_for_status()  # Raise an error for bad responses

            with open('new_version.zip', 'wb') as f:
                shutil.copyfileobj(response.raw, f)

            print("Download completed.")

        except requests.exceptions.HTTPError as err:
            print(f"HTTP error occurred: {err}")  # e.g., 404 Not Found
            return
        except Exception as e:
            print(f"An error occurred: {e}")  # Other errors
            return

        # Step 2: Unpack the zip file
        try:
            if hasattr(self, 'movie'):
                self.movie.stop()  # Stop the movie to release the loading.gif file
                print("Stopped the movie to release the file.")
                del self.movie
                print('movie deleted')
            else:
                self.movie.stop()
                print("takde movie pun stop gak")
                del self.movie
                print('movie deleted')
            self.loading.clear()
            # Remove existing files and directory before unpacking
            if os.path.exists('image'):
                shutil.rmtree('image')  # Remove the entire directory

            # Print the path of the app_directory
            print(f"Unpacking new_version.zip to: {os.path.abspath('.')}")

            shutil.unpack_archive('new_version.zip', '.')
            print("Update complete! Files have been replaced.")

        except Exception as e:
            print(f"An error occurred while unpacking: {e}")
            return

        # Step 3: Restart the application
        print("Restarting application...")
        subprocess.Popen(r'Client Manager.exe')
        sys.exit()

    def schedule_later(self):
        self.main_app.activity_page()


def check_connection():
    try:
        conn = mysql.connector.connect(
            host=host,
            user=user,
            password=password,
            database=database
        )
        if conn.is_connected():
            print("Connection to MySQL DB successful")
            return conn
            
    except Error as e:
        print(f"Error: {e}")
        return None
